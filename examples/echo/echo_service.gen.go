// Code generated by protoc-gen-dapr. DO NOT EDIT.

package echo

import (
	context "context"
	json "encoding/json"
	errors "errors"
	client "github.com/dapr/go-sdk/client"
	common "github.com/dapr/go-sdk/service/common"
)

// Service Client

// EchoClient is the client API for Echo service.
type EchoClient interface {
	Echo(ctx context.Context, in *EchoRequest) (*EchoResponse, error)
}

type echoClient struct {
	cc    client.Client
	appID string
}

// Client factory
func NewEchoClient(cc client.Client, appID string) EchoClient {
	return &echoClient{cc, appID}
}

func (c *echoClient) Echo(ctx context.Context, in *EchoRequest) (*EchoResponse, error) {
	data, err := json.Marshal(in)
	if err != nil {
		return nil, err
	}
	content := &client.DataContent{ContentType: "application/json", Data: data}
	resp, err := c.cc.InvokeMethodWithContent(ctx, c.appID, "Echo", "post", content)
	if err != nil {
		return nil, err
	}
	out := new(EchoResponse)
	err = json.Unmarshal(resp, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service Server

// EchoServer is the server API for Echo service.
// All implementations must embed UnimplementedEchoServer
// for forward compatibility
type EchoServer interface {
	Echo(ctx context.Context, in *EchoRequest) (*EchoResponse, error)
	mustEmbedUnimplementedEchoServer()
}

// UnimplementedEchoServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (UnimplementedEchoServer) Echo(ctx context.Context, in *EchoRequest) (*EchoResponse, error) {
	return nil, errors.New("method Echo not implemented")
}
func (UnimplementedEchoServer) mustEmbedUnimplementedEchoServer() {}

// UnsafeEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServer will
// result in compilation errors.
type UnsafeEchoServer interface {
	mustEmbedUnimplementedEchoServer()
}
type InvocationHandlerFunc func(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error)

func _Echo_Echo_Handler(srv EchoServer) InvocationHandlerFunc {
	return func(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error) {
		req := &EchoRequest{}
		decErr := json.Unmarshal(in.Data, req)
		if decErr != nil {
			err = decErr
			return
		}
		resp, mErr := srv.Echo(ctx, req)
		if mErr != nil {
			err = mErr
			return
		}
		data, encErr := json.Marshal(resp)
		if encErr != nil {
			err = encErr
			return
		}
		out = &common.Content{
			ContentType: "application/json",
			Data:        data,
		}
		return
	}
}
func Register(s common.Service, srv EchoServer) {
	s.AddServiceInvocationHandler("Echo", _Echo_Echo_Handler(srv))
}
